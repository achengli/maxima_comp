/* Maxima vector manipulation library 
* +++
* Yassin Achengli - Copyright (C) 2025 BY-NC
*/

/*
The three main functions for functional analysis.
- map
- filter
- reduce
*/

insert (v, val) := append(v, [val])$

map (v, func) := block ([out_v: []],
  for i : 1 thru length (v) do
    out_v : insert (out_v, func (v[i])), out_v)$

reduce (v, func, [first_value]) := block ([out_value: if emptyp(first_value) then 0 else first_value],
  for i : 1 thru length (v) do
    out_value : func (out_value, v[i]), out_value)$

filter (v, func) := block ([out_v: []],
  for i : 1 thru length (v) do
    if func (v[i]) then
      out_v : insert (out_v, v[i]), out_v)$

remove (v, element, [count]) := block ([out_v : [],
                            c : (if count > 0 then count else 1)],
  for i : 1 thru length (v) do
    if v[i] = element and c > 0 then
      c : c - 1
    else
      out_v : insert (out_v, v[i]), out_v)$

count (v, condition) := block ([c: 0],
  for i : 1 thru length(v) do
    if condition (v[i]) then c : c + 1, c)$

find (v, pattern) := block ([found: []],
  for i : 1 thru length (v) do
    if pattern (v[i]) then
      found : insert (found, i),
      found)$

v_min (v) := reduce (v, lambda ([a, x], if x < a then x else a), -inf)$

v_max (v) := reduce (v, lambda ([a, x], if x > a then x else a), inf)$

laplace_fir (a, b) := block ([x : 0], 
  for i : 1 thru length (a) do
    x : x + a[i] * 's^(length(a)-i), x) / 
  block ([x : 0], 
    for i : 1 thru length (b) do
      x : x + b[i] * 's^(length (b)-i), x)$

laplace_iir (a) := laplace_fir (a, [1])$

cont_convolution (f, g, [t]) := block ([], 
  if emptyp (t) then
    integrate (f ('tau) * g ('t - 'tau), 'tau, -inf, inf)
  else
    integrate (f ('tau) * g ('t - 'tau), 'tau, t[1], t[2]))$


print("vector.mac was loaded")$

/* END OF vector.mac */
