/* 
 * Copyright (C) BY-NC 2023 - 2025 Yassin Achengli <achengli@github.com>
 * ----------------------------------
 * - File: mextra_matrix.mac
 * - Project: Maxima extra matrix functions.
 * - Description: Bunch of maxima functions for matrix and array
 *                data processing.
 * - License: BSD clause 3
 */

/* Alter the column of a matrix. */
mextra_set_col(mat,c,col_val):= block([m: transpose(mat)],
    if not matrixp(mat) then
        (error("mat must be a matrix."), return(false)),
    if matrixp(col_val) then
        if matrix_size(col_val)[1] = matrix_size(mat)[1] then
            m[c]: transpose(col_val)[1]
            else
                m[c]: col_val[1]
        else if listp(col_val) then
            m[c]: col_val, 
    transpose(m));

/* Extract the `c` column of a matrix. */
mextra_col(mat,c):= transpose(transpose(mat)[c]);

/* Returns random matrix. The randomization uses a normal distribution. */
mextra_random_matrix(n,m):= block([mat: matrix([])],
    if not (integerp(n) and integerp(m) and m >= 1 and n >= 1) then
        error("The entered scalars `m` and `n` are not valid scalar dimension"),
    for i:1 thru n do
        for j:1 thru m do
            mat[i][j]: random(),
    return(mat));

/* Sub minor matrix. */
mextra_minor_matrix(mat,from_row,to_row,from_col,to_col):= block(
        [m: matrix([])],
        if not matrixp(mat) then 
            error("`mat` input is not a valid matrix")
            else if (not (integerp(from_row) and integerp(to_row) and
                integerp(from_col) and integerp(to_col)) or from_row < 1 or
                to_row < 1 or from_col < 1 or to_col < 1) then
                error("from and to row and column inputs must be integers from 1 to `mat` size."),
        m: zeromatrix(to_row - from_row, to_col - from_col),
        for i:from_row thru to_row do
            for j:from_col thru to_col do
                m[i-from_row+1][j-from_col+1]: mat[i][j],
        m);

/* Functional reducer applied to matrix and arrays. */
mextra_reduce(lambda_fn, mat):= block([acum: 0.0], 
    if matrixp(mat) then
        (for i in mat do
            for j in i do
                acum: lambda_fn(acum,j))
        else if listp(mat) then
            (for i in mat do
                acum: lambda_fn(acum,i)),
    acum);

mextra_sum(mat):= mextra_reduce(lambda([acum,x], acum + x),mat);
mextra_sub(mat):= mextra_reduce(lambda([acum,x], acum - x),mat);
mextra_mod(mat):= mat / mextra_sum(mat);

/* Filter elements from a matrix which satisfies the lambda_fn function and then
puts all together inside a vector. */
mextra_filter(lambda_fn, mat):= block([ret: [], mat_size: matrix_size(mat)], 
    for i: 1 thru mat_size[1] do
        for j: 1 thru mat_size[2] do
            if (not lambda_fn(mat[i][j])) then 
                ret: append(ret,[mat[i][j]]),
    ret);

mextra_lower_than(shirt, mat):= mextra_filter(lambda([x], x < shirt), mat);
mextra_bigger_than(shirt, mat):= mextra_filter(lambda([x], x > shirt), mat);
mextra_equal_to(val, mat):= mextra_filter(lambda([x], x < val), mat);

/* Reshape a matrix, convers a n'xm' matrix to a nxm one. */
mextra_reshape(mat,n,m):= block([ret: matrix([]), mat_size: matrix_size(mat)],
    if n*m > mat_size[1] * mat_size[2] then
        error("Size mismatch")
        else if ((n < 1 or m < 1) or not (integerp(n) and integerp(n))) then
            error("n and m must be positive integers greater than 0"),
    mat: zeromatrix(n,m),
    for i: 1 thru n do
        for j: 1 thru m do
            ret[i][j]: mat[floor(i / mat_size[1])+1, mod(j,mat_size[1])+1],
    ret);

/* Matrix norm 2. */
mextra_abs(mat) := sqrt(mextra_reduce(lambda([acum, x], acum + x^2), mat));

/* Transform matrix to string expression. */
mextra_mat2str(mat) := block([sout: ""],
  for i:0 thru matrix_size(mat)[1] do
    (for j:0 thru matrix_size(mat)[2] do
      sout: concat(sout, string(mat[i,j]), "\t")),
      sout: concat(sout, "\n"));

mextra_matrix_p: true;
